[#
 create_workload.ezt :  a template used to generate APR/PoCore pool workloads

 ====================================================================
   Copyright 2010 Greg Stein

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 ====================================================================
]
/* DO NOT EDIT. THIS FILE IS AUTO-GENERATED FROM create_workload.ezt  */

#include <stdio.h>
#include <mach/mach_time.h>
#include <mach/task.h>

#include <apr-1/apr_pools.h>

#include "pc_misc.h"
#include "pc_memory.h"

#define CLEAR_REPS 100
#define ITER1_COUNT 10
#define ITER2_COUNT 100
#define ITER3_COUNT 1000


void exercise_apr(void)
{
    /* Set up all the pools into an appropriate tree.  */
[for root_pools]
    apr_pool_t *[root_pools];
    apr_pool_create(&[root_pools], 0);
[end]
[for pools]
    apr_pool_t *[pools.var];
    apr_pool_create(&[pools.var], [pools.parent]);
[end]

    /* Perform a bunch of allocations using these pools.  */
[for alloc]
    apr_palloc([alloc.pool], [alloc.amt]);[end]

    int i, j, k;

    for (i = CLEAR_REPS; i--; )
    {
        /* Clear some pools. May destroy some subpools.  */
[for clear]
        apr_pool_clear([clear]);[end]
        /* Do some more allocations back into the cleared pools.  */
[for alloc2]
        apr_palloc([alloc2.pool], [alloc2.amt]);[end]
    }

    /* Have some (nested) iterpool fun.  */
    apr_pool_t *iterpool1;
    apr_pool_create(&iterpool1, [iter_parent]);
    for (i = ITER1_COUNT; i--; )
    {
        apr_pool_clear(iterpool1);

        [for iter1]
            apr_palloc(iterpool1, [iter1]);[end]

        apr_pool_t *iterpool2;
        apr_pool_create(&iterpool2, iterpool1);
        for (j = ITER2_COUNT; j--; )
        {
            apr_pool_clear(iterpool2);

            [for iter2]
                apr_palloc(iterpool2, [iter2]);[end]

            apr_pool_t *iterpool3;
            apr_pool_create(&iterpool3, iterpool2);
            for (k = ITER3_COUNT; k--; )
            {
                apr_pool_clear(iterpool3);

                [for iter3]
                    apr_palloc(iterpool3, [iter3]);[end]
            }
        }
    }
    apr_pool_destroy(iterpool1);

[for root_pools]
    apr_pool_destroy([root_pools]);[end]
}


void exercise_pocore(pc_context_t *ctx)
{
    /* Set up all the pools into an appropriate tree.  */
[for root_pools]
    pc_pool_t *[root_pools] = pc_pool_root(ctx);[end]
[for pools]
    pc_pool_t *[pools.var] = pc_pool_create([pools.parent]);[end]

    /* Perform a bunch of allocations using these pools.  */
[for alloc]
    pc_alloc([alloc.pool], [alloc.amt]);[end]

    int i, j, k;

    for (i = CLEAR_REPS; i--; )
    {
        /* Clear some pools. May destroy some subpools.  */
[for clear]
        pc_pool_clear([clear]);[end]
        /* Do some more allocations back into the cleared pools.  */
[for alloc2]
        pc_alloc([alloc2.pool], [alloc2.amt]);[end]
    }

    /* Have some (nested) iterpool fun.  */
    pc_pool_t *iterpool1 = pc_pool_create([iter_parent]);
    for (i = ITER1_COUNT; i--; )
    {
        pc_pool_clear(iterpool1);

        [for iter1]
            pc_alloc(iterpool1, [iter1]);[end]

        pc_pool_t *iterpool2 = pc_pool_create(iterpool1);
        for (j = ITER2_COUNT; j--; )
        {
            pc_pool_clear(iterpool2);

            [for iter2]
                pc_alloc(iterpool2, [iter2]);[end]

            pc_pool_t *iterpool3 = pc_pool_create(iterpool2);
            for (k = ITER3_COUNT; k--; )
            {
                pc_pool_clear(iterpool3);

                [for iter3]
                    pc_alloc(iterpool3, [iter3]);[end]
            }
        }
    }
    pc_pool_destroy(iterpool1);

[for root_pools]
    pc_pool_destroy([root_pools]);[end]
}
